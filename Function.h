#pragma once
int data[24];
int fall[7][4][4] =
{
		0x0,0x2,0x7,0x0,0x0,0x2,0x3,0x2,0x0,0x7,0x2,0x0,0x0,0x2,0x6,0x2,
		0x0,0x6,0x2,0x2,0x0,0x1,0x7,0x0,0x0,0x2,0x2,0x3,0x0,0x7,0x4,0x0,
		0x0,0x3,0x2,0x2,0x0,0x7,0x1,0x0,0x0,0x1,0x1,0x3,0x0,0x7,0x1,0x0,
		0x0,0x6,0x3,0x0,0x0,0x1,0x3,0x2,0x0,0x6,0x3,0x0,0x0,0x1,0x3,0x2,
		0x0,0x3,0x6,0x0,0x0,0x2,0x3,0x1,0x0,0x3,0x6,0x0,0x0,0x2,0x3,0x1,
		0x0,0x3,0x3,0x0,0x0,0x3,0x3,0x0,0x0,0x3,0x3,0x0,0x0,0x3,0x3,0x0,
		0x0,0x0,0xf,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0xf,0x0,0x1,0x1,0x1,0x1
};
void init();
void Drawfall(int temp[], int floor);
bool Check_Lowest(int temp[], int floor);
void DOWN(int *floor);
void Fill(int temp[], int floor);
void Full();
void init()
{
	for (int j = 0; j <= 22; j++)
		data[j] = 0xe007;
	data[23] = 0xffff;
}
void Drawfall(int temp[],int floor)
{
	for (int j = 0; j <= 3; j++)
		data[floor + j] = data[floor + j] | temp[floor];
	for (int j = 0; j < 24; j++)
	{
		char b[16];
		_itoa_s(data[j], b, 2);
		printf("%s", b);
		printf("\n");
	}
}
bool Check_Lowest(int temp[], int floor)
{
	for (int j = 0; j <= 3; j++)
		if ((temp[0] & data[floor + j+1]) + (temp[1] & data[floor + j + 1]) + (temp[2] & data[floor + j + 1]) + (temp[3] & data[floor + j + 1])) return false;
	return true;
}
void DOWN(int *floor)
{
	*floor = *floor + 1;
}
void Fill(int temp[], int floor)
{
	for (int j = 0; j <= 3; j++)
		data[floor + j] = data[floor + j] | temp[floor];

}
void Full()
{
	for (int j = 0; j <= 22; j++)
	{
		if (data[j] == 0xffff)
			data[j] = 0x0000;
	}
}

